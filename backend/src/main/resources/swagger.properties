## AuthenticationController ##
api.auth.signin.value=Login
api.auth.signin.notes=\
  Allows log in to system. In order to authenticate pass your username/email and password.<br><br>\
  Endpoint returns Json Web Token required to use api. When performing request on secured endpoint following header must be attached:<br>\
  <i>Authorization: Bearer <token></i><br><br>\
  For authorization in swagger click authorize button and paste in text field returned token prefixed with <i>Bearer</i>, e.g:<br>\
  <i>Bearer {acquired_token}</i>
api.auth.signup.value=Register user
api.auth.signup.notes=Allows to register new user based on supplied registration data.
api.auth.change.password.value=Change password
api.auth.change.password.notes=Changes password for current user. New password must be confirmed with current password.
api.auth.change.email.value=Change email
api.auth.change.email.notes=Changes email of current user. New email must be confirmed with password.


## UserController ##
api.users.check.email.value=Check email availability
api.users.check.email.notes=Checks if given email is available.
api.users.check.username.value=Check username availability
api.users.check.username.notes=Checks if given username is available.
api.users.current.value=Get current user
api.users.current.notes=Returns information about currently logged user.
api.users.get.value=Get user by id
api.users.get.notes=Returns user with given id.


## ScreeningRoomController ##
api.screening.room.get.value=Get screening rooms by ids
api.screening.room.get.notes=\
  Returns screening rooms with supplied ids. <br>\
  Additionally allowed object states for queried screening rooms may by specified by query params.
api.screening.room.post.value=Create screening room
api.screening.room.post.notes=Creates screening room based on supplied data.
api.screening.room.ids=Ids of objects to query
api.screening.room.states=Set of allowed object states. Only objects which has one of specified object states will be returned
api.screening.room.put.value=Update screening room
api.screening.room.put.notes=Updates existing screening room based on supplied data.
api.screening.room.delete.value=Remove screening rooms
api.screening.room.delete.notes=Removes screening rooms by ids
api.screening.room.rm.ids=Id of objects to remove

## Movies ##
api.movies.get.value=Get movies by ids
api.movies.get.notes=\
  Returns movies with supplied ids. <br>\
  Additionally allowed object states for queried movies may by specified by query params.
api.movies.post.value=Create movie
api.movies.post.notes=\
  Creates movie based on supplied data. In order to create movie you have to pass imdbId.<br>\
  Imdbid is id of the movie in Internet Movie Database.
api.movies.delete.value=Delete movies by ids
api.movies.delete.notes=Removes movies with supplied ids.
api.movies.current.value=Get movies played in specific period
api.movies.current.notes=Returns movies which are/were played in given period.

## Screenings ##
api.screenings.get.value=Get screenings for movie
api.screenings.get.notes=Returns screenings for specific movie.
api.screenings.post.value=Create screening
api.screenings.post.notes=Creates screening for specific movie and screening room.

## Seats ##
api.seats.get.value=Get seats for screening
api.seats.get.notes=Returns seats for screening with given id.